// <auto-generated />
using CocktailPlanner.DataLink;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CocktailPlanner.Migrations
{
    [DbContext(typeof(CocktailPDbContext))]
    partial class CocktailPDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CocktailPlanner.Models.Cocktail", b =>
                {
                    b.Property<int>("IdCocktail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCocktail"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Image")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdCocktail");

                    b.ToTable("Cocktails");
                });

            modelBuilder.Entity("CocktailPlanner.Models.CocktailIngredient", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<double>("QuantityRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredient");
                });

            modelBuilder.Entity("CocktailPlanner.Models.EventPlan", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvent"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdEvent");

                    b.ToTable("EventPlans");
                });

            modelBuilder.Entity("CocktailPlanner.Models.EventPlanCocktail", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("EventPlanId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("CocktailId", "EventPlanId");

                    b.HasIndex("EventPlanId");

                    b.ToTable("EventPlanCocktail");
                });

            modelBuilder.Entity("CocktailPlanner.Models.Ingredient", b =>
                {
                    b.Property<int>("IdIngredient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIngredient"));

                    b.Property<bool>("IsAlcoholic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("QuantityAvailable")
                        .HasMaxLength(255)
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdIngredient");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("CocktailPlanner.Models.CocktailIngredient", b =>
                {
                    b.HasOne("CocktailPlanner.Models.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailPlanner.Models.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CocktailPlanner.Models.EventPlanCocktail", b =>
                {
                    b.HasOne("CocktailPlanner.Models.Cocktail", "Cocktail")
                        .WithMany("EventPlanCocktails")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailPlanner.Models.EventPlan", "EventPlan")
                        .WithMany("EventPlanCocktails")
                        .HasForeignKey("EventPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("EventPlan");
                });

            modelBuilder.Entity("CocktailPlanner.Models.Cocktail", b =>
                {
                    b.Navigation("CocktailIngredients");

                    b.Navigation("EventPlanCocktails");
                });

            modelBuilder.Entity("CocktailPlanner.Models.EventPlan", b =>
                {
                    b.Navigation("EventPlanCocktails");
                });

            modelBuilder.Entity("CocktailPlanner.Models.Ingredient", b =>
                {
                    b.Navigation("CocktailIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
